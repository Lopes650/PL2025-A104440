
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTnonassocIFXrightELSEnonassocEQUALSLESSTHANGREATERTHANLESSEQUALSGREATEQUALSLESSGREATleftPLUSMINUSleftTIMESDIVIDEDIVMODnonassocTHENAND ARRAY ATRIBUTION BEGIN BOOLEAN BOOLEAN_LITERAL CARET CASE CHAR CHAR_LITERAL COLON COMMA CONST DIV DIVIDE DIVIDEEQUALS DO DOUBLEPERIOD DOWNTO ELSE END EQUALS FILE FOR FUNCTION FUNCTION_NAME GOTO GREATEQUALS GREATERTHAN IDENTIFIER IF IN INTEGER LABEL LBRACKET LBRACKETSUB LESSEQUALS LESSGREAT LESSTHAN LPAREN MINUS MINUSEQUALS MOD NIL NOT NUMBER OF OR PACKED PERIOD PLUS PLUSEQUALS PROCEDURE PROCEDURE_NAME PROGRAM RBRACKET RBRACKETSUB REAL RECORD REPEAT RPAREN SEMICOLON SET STRING STRING_LITERAL THEN TIMES TIMESEQUALS TO TYPE UNTIL VAR WHILE WITHprogram : PROGRAM IDENTIFIER SEMICOLON block PERIODblock : declarations sub_blockdeclarations : VAR var_listdeclarations :var_list : var_list decl SEMICOLONvar_list : decl SEMICOLONdecl : vars COLON typedecl : vars COLON arrayvars : vars COMMA IDENTIFIERvars : IDENTIFIERtype : INTEGER\n| BOOLEAN\n| REAL\n| STRING\n| CHARarray : ARRAY LBRACKET NUMBER DOUBLEPERIOD NUMBER RBRACKET OF typesub_block : BEGIN statement_list ENDsub_block : BEGIN ENDstatement_list : statement_list SEMICOLON statementstatement_list : statement statement : atribution_statement\n| if_statement\n| while_statement\n| for_statement\n| case_statement\n| procedure_call\n| sub_blockstatement :atribution_statement : IDENTIFIER ATRIBUTION expressionif_statement : IF expression THEN statement ELSE statementif_statement : IF expression THEN statement %prec IFXwhile_statement : WHILE expression DO statementfor_statement : FOR IDENTIFIER ATRIBUTION expression TO expression DO statement\n| FOR IDENTIFIER ATRIBUTION expression DOWNTO expression DO statementcase_statement : CASE expression OF case_list ENDcase_list : case_list SEMICOLON case_itemcase_list : case_itemcase_item : constant COLON statementprocedure_call : PROCEDURE_NAME LPAREN expr_list RPAREN\n| IDENTIFIER LPAREN expr_list RPARENfunction_call : FUNCTION_NAME LPAREN expr_list RPAREN\n| IDENTIFIER LPAREN expr_list RPARENexpr_list : expr_list COMMA expressionexpr_list : expressionexpr_list :expression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression DIV expression\n| expression MOD expression\n| expression EQUALS expression\n| expression LESSTHAN expression\n| expression GREATERTHAN expression\n| expression LESSEQUALS expression\n| expression GREATEQUALS expression\n| expression LESSGREAT expression\n| expression AND expression\n| expression OR expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : factorfactor : NUMBERfactor : BOOLEAN_LITERALfactor : IDENTIFIERfactor : IDENTIFIER LBRACKET expression RBRACKETfactor : CHAR_LITERALfactor : STRING_LITERALfactor : function_callconstant : NUMBER\n| BOOLEAN_LITERAL\n| IDENTIFIER\n| CHAR_LITERAL\n| STRING_LITERAL'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,8,],[0,-1,]),'IDENTIFIER':([2,7,10,11,26,27,28,29,32,34,36,37,38,40,41,53,54,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,94,127,131,132,134,135,143,144,],[3,14,25,14,45,45,51,45,-6,63,25,45,45,45,45,45,-5,25,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,25,45,121,45,25,45,45,121,25,25,25,]),'SEMICOLON':([3,10,12,15,16,17,18,19,20,21,22,23,24,31,35,36,42,43,44,45,46,47,48,55,56,57,58,59,60,61,64,65,68,83,88,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,116,117,124,127,128,129,130,133,135,137,140,141,143,144,146,147,149,],[4,-28,32,36,-18,-20,-21,-22,-23,-24,-25,-26,-27,54,-17,-28,-62,-63,-64,-65,-67,-68,-69,-7,-8,-11,-12,-13,-14,-15,-19,-29,-28,-60,-28,-40,-31,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-32,134,-37,-39,-28,-66,-42,-41,-35,-28,-30,-36,-38,-28,-28,-33,-34,-16,]),'VAR':([4,],[7,]),'BEGIN':([4,6,10,11,32,36,54,68,88,127,135,143,144,],[-4,10,10,-3,-6,10,-5,10,10,10,10,10,10,]),'PERIOD':([5,9,16,35,],[8,-2,-18,-17,]),'END':([10,15,16,17,18,19,20,21,22,23,24,35,36,42,43,44,45,46,47,48,64,65,68,83,88,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,116,117,124,127,128,129,130,133,135,137,140,141,143,144,146,147,],[16,35,-18,-20,-21,-22,-23,-24,-25,-26,-27,-17,-28,-62,-63,-64,-65,-67,-68,-69,-19,-29,-28,-60,-28,-40,-31,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-32,133,-37,-39,-28,-66,-42,-41,-35,-28,-30,-36,-38,-28,-28,-33,-34,]),'IF':([10,36,68,88,127,135,143,144,],[26,26,26,26,26,26,26,26,]),'WHILE':([10,36,68,88,127,135,143,144,],[27,27,27,27,27,27,27,27,]),'FOR':([10,36,68,88,127,135,143,144,],[28,28,28,28,28,28,28,28,]),'CASE':([10,36,68,88,127,135,143,144,],[29,29,29,29,29,29,29,29,]),'PROCEDURE_NAME':([10,36,68,88,127,135,143,144,],[30,30,30,30,30,30,30,30,]),'COLON':([13,14,63,118,119,120,121,122,123,],[33,-10,-9,135,-70,-71,-72,-73,-74,]),'COMMA':([13,14,38,42,43,44,45,46,47,48,53,63,66,67,83,86,87,91,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,126,128,129,130,],[34,-10,-45,-62,-63,-64,-65,-67,-68,-69,-45,-9,94,-44,-60,-45,-45,94,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,94,94,-43,-66,-42,-41,]),'ELSE':([16,18,19,20,21,22,23,24,35,42,43,44,45,46,47,48,65,68,83,88,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,114,124,127,128,129,130,133,137,143,144,146,147,],[-18,-21,-22,-23,-24,-25,-26,-27,-17,-62,-63,-64,-65,-67,-68,-69,-29,-28,-60,-28,-40,127,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-32,-39,-28,-66,-42,-41,-35,-30,-28,-28,-33,-34,]),'ATRIBUTION':([25,51,],[37,89,]),'LPAREN':([25,26,27,29,30,37,38,40,41,45,49,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[38,41,41,41,53,41,41,41,41,86,87,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'NOT':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'NUMBER':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,90,92,94,131,132,134,136,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,119,125,43,43,43,119,142,]),'BOOLEAN_LITERAL':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,90,94,131,132,134,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,120,44,44,44,120,]),'CHAR_LITERAL':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,90,94,131,132,134,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,122,46,46,46,122,]),'STRING_LITERAL':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,90,94,131,132,134,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,123,47,47,47,123,]),'FUNCTION_NAME':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'INTEGER':([33,148,],[57,57,]),'BOOLEAN':([33,148,],[58,58,]),'REAL':([33,148,],[59,59,]),'STRING':([33,148,],[60,60,]),'CHAR':([33,148,],[61,61,]),'ARRAY':([33,],[62,]),'RPAREN':([38,42,43,44,45,46,47,48,53,66,67,83,84,86,87,91,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,126,128,129,130,],[-45,-62,-63,-64,-65,-67,-68,-69,-45,93,-44,-60,110,-45,-45,124,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,129,130,-43,-66,-42,-41,]),'THEN':([39,42,43,44,45,46,47,48,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,128,129,130,],[68,-62,-63,-64,-65,-67,-68,-69,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-66,-42,-41,]),'PLUS':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[69,-62,-63,-64,-65,-67,-68,-69,69,69,69,69,69,69,-46,-47,-48,-49,-50,-51,69,69,69,69,69,69,69,69,-61,69,69,69,-66,-42,-41,69,69,]),'MINUS':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[70,-62,-63,-64,-65,-67,-68,-69,70,70,70,70,70,70,-46,-47,-48,-49,-50,-51,70,70,70,70,70,70,70,70,-61,70,70,70,-66,-42,-41,70,70,]),'TIMES':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[71,-62,-63,-64,-65,-67,-68,-69,71,71,71,71,71,71,71,71,-48,-49,-50,-51,71,71,71,71,71,71,71,71,-61,71,71,71,-66,-42,-41,71,71,]),'DIVIDE':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[72,-62,-63,-64,-65,-67,-68,-69,72,72,72,72,72,72,72,72,-48,-49,-50,-51,72,72,72,72,72,72,72,72,-61,72,72,72,-66,-42,-41,72,72,]),'DIV':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[73,-62,-63,-64,-65,-67,-68,-69,73,73,73,73,73,73,73,73,-48,-49,-50,-51,73,73,73,73,73,73,73,73,-61,73,73,73,-66,-42,-41,73,73,]),'MOD':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[74,-62,-63,-64,-65,-67,-68,-69,74,74,74,74,74,74,74,74,-48,-49,-50,-51,74,74,74,74,74,74,74,74,-61,74,74,74,-66,-42,-41,74,74,]),'EQUALS':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[75,-62,-63,-64,-65,-67,-68,-69,75,75,75,75,75,75,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,75,75,-61,75,75,75,-66,-42,-41,75,75,]),'LESSTHAN':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[76,-62,-63,-64,-65,-67,-68,-69,76,76,76,76,76,76,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,76,76,-61,76,76,76,-66,-42,-41,76,76,]),'GREATERTHAN':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[77,-62,-63,-64,-65,-67,-68,-69,77,77,77,77,77,77,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,77,77,-61,77,77,77,-66,-42,-41,77,77,]),'LESSEQUALS':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[78,-62,-63,-64,-65,-67,-68,-69,78,78,78,78,78,78,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,78,78,-61,78,78,78,-66,-42,-41,78,78,]),'GREATEQUALS':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[79,-62,-63,-64,-65,-67,-68,-69,79,79,79,79,79,79,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,79,79,-61,79,79,79,-66,-42,-41,79,79,]),'LESSGREAT':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[80,-62,-63,-64,-65,-67,-68,-69,80,80,80,80,80,80,-46,-47,-48,-49,-50,-51,None,None,None,None,None,None,80,80,-61,80,80,80,-66,-42,-41,80,80,]),'AND':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[81,-62,-63,-64,-65,-67,-68,-69,81,81,81,81,-60,81,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,81,-61,81,81,81,-66,-42,-41,81,81,]),'OR':([39,42,43,44,45,46,47,48,50,52,65,67,83,84,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,126,128,129,130,138,139,],[82,-62,-63,-64,-65,-67,-68,-69,82,82,82,82,-60,82,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,82,82,82,-66,-42,-41,82,82,]),'DO':([42,43,44,45,46,47,48,50,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,128,129,130,138,139,],[-62,-63,-64,-65,-67,-68,-69,88,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-66,-42,-41,143,144,]),'OF':([42,43,44,45,46,47,48,52,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,128,129,130,145,],[-62,-63,-64,-65,-67,-68,-69,90,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-66,-42,-41,148,]),'RBRACKET':([42,43,44,45,46,47,48,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,128,129,130,142,],[-62,-63,-64,-65,-67,-68,-69,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,128,-66,-42,-41,145,]),'TO':([42,43,44,45,46,47,48,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,115,128,129,130,],[-62,-63,-64,-65,-67,-68,-69,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,131,-66,-42,-41,]),'DOWNTO':([42,43,44,45,46,47,48,83,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,115,128,129,130,],[-62,-63,-64,-65,-67,-68,-69,-60,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,132,-66,-42,-41,]),'LBRACKET':([45,62,],[85,92,]),'DOUBLEPERIOD':([125,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'declarations':([4,],[6,]),'sub_block':([6,10,36,68,88,127,135,143,144,],[9,24,24,24,24,24,24,24,24,]),'var_list':([7,],[11,]),'decl':([7,11,],[12,31,]),'vars':([7,11,],[13,13,]),'statement_list':([10,],[15,]),'statement':([10,36,68,88,127,135,143,144,],[17,64,95,114,137,141,146,147,]),'atribution_statement':([10,36,68,88,127,135,143,144,],[18,18,18,18,18,18,18,18,]),'if_statement':([10,36,68,88,127,135,143,144,],[19,19,19,19,19,19,19,19,]),'while_statement':([10,36,68,88,127,135,143,144,],[20,20,20,20,20,20,20,20,]),'for_statement':([10,36,68,88,127,135,143,144,],[21,21,21,21,21,21,21,21,]),'case_statement':([10,36,68,88,127,135,143,144,],[22,22,22,22,22,22,22,22,]),'procedure_call':([10,36,68,88,127,135,143,144,],[23,23,23,23,23,23,23,23,]),'expression':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[39,50,52,65,67,83,84,67,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,67,67,115,126,138,139,]),'factor':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'function_call':([26,27,29,37,38,40,41,53,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,89,94,131,132,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'type':([33,148,],[55,149,]),'array':([33,],[56,]),'expr_list':([38,53,86,87,],[66,91,112,113,]),'case_list':([90,],[116,]),'case_item':([90,134,],[117,140,]),'constant':([90,134,],[118,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER SEMICOLON block PERIOD','program',5,'p_program','pascal_yacc.py',18),
  ('block -> declarations sub_block','block',2,'p_block','pascal_yacc.py',22),
  ('declarations -> VAR var_list','declarations',2,'p_declarations_var','pascal_yacc.py',26),
  ('declarations -> <empty>','declarations',0,'p_declarations_empty','pascal_yacc.py',30),
  ('var_list -> var_list decl SEMICOLON','var_list',3,'p_var_list_multi','pascal_yacc.py',34),
  ('var_list -> decl SEMICOLON','var_list',2,'p_var_list_single','pascal_yacc.py',38),
  ('decl -> vars COLON type','decl',3,'p_decl_type','pascal_yacc.py',42),
  ('decl -> vars COLON array','decl',3,'p_decl_array','pascal_yacc.py',46),
  ('vars -> vars COMMA IDENTIFIER','vars',3,'p_vars_multi','pascal_yacc.py',50),
  ('vars -> IDENTIFIER','vars',1,'p_vars_single','pascal_yacc.py',54),
  ('type -> INTEGER','type',1,'p_type_simple','pascal_yacc.py',58),
  ('type -> BOOLEAN','type',1,'p_type_simple','pascal_yacc.py',59),
  ('type -> REAL','type',1,'p_type_simple','pascal_yacc.py',60),
  ('type -> STRING','type',1,'p_type_simple','pascal_yacc.py',61),
  ('type -> CHAR','type',1,'p_type_simple','pascal_yacc.py',62),
  ('array -> ARRAY LBRACKET NUMBER DOUBLEPERIOD NUMBER RBRACKET OF type','array',8,'p_array','pascal_yacc.py',66),
  ('sub_block -> BEGIN statement_list END','sub_block',3,'p_sub_block_non_empty','pascal_yacc.py',73),
  ('sub_block -> BEGIN END','sub_block',2,'p_sub_block_empty','pascal_yacc.py',77),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_multi','pascal_yacc.py',81),
  ('statement_list -> statement','statement_list',1,'p_statement_list_single','pascal_yacc.py',85),
  ('statement -> atribution_statement','statement',1,'p_statement','pascal_yacc.py',98),
  ('statement -> if_statement','statement',1,'p_statement','pascal_yacc.py',99),
  ('statement -> while_statement','statement',1,'p_statement','pascal_yacc.py',100),
  ('statement -> for_statement','statement',1,'p_statement','pascal_yacc.py',101),
  ('statement -> case_statement','statement',1,'p_statement','pascal_yacc.py',102),
  ('statement -> procedure_call','statement',1,'p_statement','pascal_yacc.py',103),
  ('statement -> sub_block','statement',1,'p_statement','pascal_yacc.py',104),
  ('statement -> <empty>','statement',0,'p_statement_empty','pascal_yacc.py',108),
  ('atribution_statement -> IDENTIFIER ATRIBUTION expression','atribution_statement',3,'p_statement_atrib','pascal_yacc.py',126),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_statement_if_complete','pascal_yacc.py',130),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_statement_if_incomplete','pascal_yacc.py',134),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_statement_while','pascal_yacc.py',143),
  ('for_statement -> FOR IDENTIFIER ATRIBUTION expression TO expression DO statement','for_statement',8,'p_statement_for','pascal_yacc.py',147),
  ('for_statement -> FOR IDENTIFIER ATRIBUTION expression DOWNTO expression DO statement','for_statement',8,'p_statement_for','pascal_yacc.py',148),
  ('case_statement -> CASE expression OF case_list END','case_statement',5,'p_statement_case','pascal_yacc.py',153),
  ('case_list -> case_list SEMICOLON case_item','case_list',3,'p_case_list','pascal_yacc.py',157),
  ('case_list -> case_item','case_list',1,'p_case_list_single','pascal_yacc.py',161),
  ('case_item -> constant COLON statement','case_item',3,'p_case_item','pascal_yacc.py',165),
  ('procedure_call -> PROCEDURE_NAME LPAREN expr_list RPAREN','procedure_call',4,'p_procedure_call','pascal_yacc.py',169),
  ('procedure_call -> IDENTIFIER LPAREN expr_list RPAREN','procedure_call',4,'p_procedure_call','pascal_yacc.py',170),
  ('function_call -> FUNCTION_NAME LPAREN expr_list RPAREN','function_call',4,'p_function_call','pascal_yacc.py',174),
  ('function_call -> IDENTIFIER LPAREN expr_list RPAREN','function_call',4,'p_function_call','pascal_yacc.py',175),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list_multi','pascal_yacc.py',179),
  ('expr_list -> expression','expr_list',1,'p_expr_list_single','pascal_yacc.py',183),
  ('expr_list -> <empty>','expr_list',0,'p_expr_list_empty','pascal_yacc.py',187),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','pascal_yacc.py',192),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','pascal_yacc.py',193),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','pascal_yacc.py',194),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','pascal_yacc.py',195),
  ('expression -> expression DIV expression','expression',3,'p_expression_binop','pascal_yacc.py',196),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','pascal_yacc.py',197),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','pascal_yacc.py',198),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_binop','pascal_yacc.py',199),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_binop','pascal_yacc.py',200),
  ('expression -> expression LESSEQUALS expression','expression',3,'p_expression_binop','pascal_yacc.py',201),
  ('expression -> expression GREATEQUALS expression','expression',3,'p_expression_binop','pascal_yacc.py',202),
  ('expression -> expression LESSGREAT expression','expression',3,'p_expression_binop','pascal_yacc.py',203),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','pascal_yacc.py',204),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','pascal_yacc.py',205),
  ('expression -> NOT expression','expression',2,'p_expression_not','pascal_yacc.py',209),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','pascal_yacc.py',213),
  ('expression -> factor','expression',1,'p_expression_factor','pascal_yacc.py',217),
  ('factor -> NUMBER','factor',1,'p_factor_number','pascal_yacc.py',221),
  ('factor -> BOOLEAN_LITERAL','factor',1,'p_factor_boolean','pascal_yacc.py',225),
  ('factor -> IDENTIFIER','factor',1,'p_factor_id','pascal_yacc.py',229),
  ('factor -> IDENTIFIER LBRACKET expression RBRACKET','factor',4,'p_factor_index','pascal_yacc.py',233),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor_char','pascal_yacc.py',237),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','pascal_yacc.py',241),
  ('factor -> function_call','factor',1,'p_factor_func','pascal_yacc.py',245),
  ('constant -> NUMBER','constant',1,'p_constant','pascal_yacc.py',249),
  ('constant -> BOOLEAN_LITERAL','constant',1,'p_constant','pascal_yacc.py',250),
  ('constant -> IDENTIFIER','constant',1,'p_constant','pascal_yacc.py',251),
  ('constant -> CHAR_LITERAL','constant',1,'p_constant','pascal_yacc.py',252),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','pascal_yacc.py',253),
]
